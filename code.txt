/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "string.h"
#include "fatfs.h"
#include "usb_host.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
#if defined ( __ICCARM__ ) /*!< IAR Compiler */

#pragma location=0x30040000
ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
#pragma location=0x30040060
ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */
#pragma location=0x30040200
uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE]; /* Ethernet Receive Buffers */

#elif defined ( __CC_ARM )  /* MDK ARM Compiler */

__attribute__((at(0x30040000))) ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
__attribute__((at(0x30040060))) ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */
__attribute__((at(0x30040200))) uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE]; /* Ethernet Receive Buffer */

#elif defined ( __GNUC__ ) /* GNU Compiler */

ETH_DMADescTypeDef DMARxDscrTab[ETH_RX_DESC_CNT] __attribute__((section(".RxDecripSection"))); /* Ethernet Rx DMA Descriptors */
ETH_DMADescTypeDef DMATxDscrTab[ETH_TX_DESC_CNT] __attribute__((section(".TxDecripSection")));   /* Ethernet Tx DMA Descriptors */
uint8_t Rx_Buff[ETH_RX_DESC_CNT][ETH_MAX_PACKET_SIZE] __attribute__((section(".RxArraySection"))); /* Ethernet Receive Buffers */

#endif

ETH_TxPacketConfig TxConfig;

ETH_HandleTypeDef heth;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ETH_Init(void);
static void MX_USART3_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#include <arm_math.h>
#include <stdio.h>
#define ARM_MATH_CM7
#define __FPU_PRESENT 1


float MAX(float a, float b){
	if(a>b)
		return a;
	else
		return b;
}

void two_d_padding(float *in,float *out,int I,int J){
	for (int i=0;i<I+2;i++){
	    for (int j=0;j<J+2;j++){
	    	if(i==0 || j==0 || i==(I+1) || j==(J+1)){
	    		out[i*(J+2)+j]=0;
	    	}
			else{
				out[i*(J+2)+j]=in[(i-1)*J+(j-1)];;
			}
	   }
	  }
}

void three_d_padding(float *in,float *out,int I, int J, int K){
	for(int k=0;k<K;k++){
	      for (int i=0;i<(I+2);i++){
	        for (int j=0;j<(J+2);j++){
	        	if(i==0 || j==0 || i==(I+1) || j==(J+1)){
	        		out[i*(J+2)*K+j*K+k]=0;
	        	}
	    		else{
	    			out[i*(J+2)*K+j*K+k]=in[(i-1)*J*K+(j-1)*K+k];
	    		}
	       }
	      }
	    }
}

void relu(float *a, float size){
	for(int i=0;i<size;i++){
		  if(a[i]<0)
			  a[i]=0;
	  }
}

void conv1(float *in,float *out,float *w1,float *b1,int I, int J, int K){
	float sum;
	  //convolution
	  for(int k=0;k<K;k++){
	  	  for (int i=0;i<I;i++){
	  		  for (int j=0;j<J;j++){
	  			  sum=0;
	  			  sum+=(in[(i+0)*(J+2)+j]*w1[0*K+k])+(in[(i+0)*(J+2)+j+1]*w1[1*K+k])+(in[(i+0)*(J+2)+j+2]*w1[2*K+k]);
	  			  sum+=(in[(i+1)*(J+2)+j]*w1[3*K+k])+(in[(i+1)*(J+2)+j+1]*w1[4*K+k])+(in[(i+1)*(J+2)+j+2]*w1[5*K+k]);
	  			  sum+=(in[(i+2)*(J+2)+j]*w1[6*K+k])+(in[(i+2)*(J+2)+j+1]*w1[7*K+k])+(in[(i+2)*(J+2)+j+2]*w1[8*K+k]);
	  			  sum+=b1[k];
	  			  out[i*J*K+j*K+k]=sum;
	  		  }
	  	  }
	  }
}

void conv2(float *in,float *out,float *w2,float *b2, int I, int J,int K,int N){
	 float sum;
	  for(int n=0;n<N;n++){
	    	  for (int i=0;i<(I-2);i++){
	    		  for (int j=0;j<(J-2);j++){
	    			  sum=0;
	    			  for(int k=0;k<K;k++){
	    			  sum+=(in[(i+0)*J*K+j*K+k]*w2[0*K*N+k*N+n])+(in[(i+0)*J*K+(j+1)*K+k]*w2[1*K*N+k*N+n])+(in[(i+0)*J*K+(j+2)*K+k]*w2[2*K*N+k*N+n]);
	    			  sum+=(in[(i+1)*J*K+j*K+k]*w2[3*K*N+k*N+n])+(in[(i+1)*J*K+(j+1)*K+k]*w2[4*K*N+k*N+n])+(in[(i+1)*J*K+(j+2)*K+k]*w2[5*K*N+k*N+n]);
	    			  sum+=(in[(i+2)*J*K+j*K+k]*w2[6*K*N+k*N+n])+(in[(i+2)*J*K+(j+1)*K+k]*w2[7*K*N+k*N+n])+(in[(i+2)*J*K+(j+2)*K+k]*w2[8*K*N+k*N+n]);
	    			  }
	    			  sum+=b2[n];
	    			  out[i*(J-2)*N+j*N+n]=sum;
	    		  }
	    	  }
	  }
}


int file_ready = 0;
//extern uint8_t rtext[4096];
extern uint8_t rtext[4096];
extern uint8_t name[10];
float * out_img;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ETH_Init();
  MX_USART3_UART_Init();
  MX_FATFS_Init();
  MX_USB_HOST_Init();
//  HAL_Delay(5000);
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
//    HAL_Delay(5000);

    /* USER CODE BEGIN 3 */
    sprintf(name,"test.bmp");
    //sprintf(name,"test2.bmp");
    //sprintf(name,"test3.bmp");
	//sprintf(name,"demo.bmp");
	file_ready = 0;
	read_bmp(name);
    if (file_ready == 1) {
    	out_img = ProcessBmp(rtext);
	    break;
    }
  }
  HAL_Delay(50);
  printf("/////original input ////////////////////////////////////////////////////////\n");
  float *img=(float *)malloc(31*104*sizeof(float));
  for(int i=0;i<31;i++){
    	  for(int j=0;j<104;j++){
    		img[i*104+j]=255-(out_img[(30-i)*104+j]);
    	  }
      }
  for(int i=0;i<31;i++){
    	  for(int j=0;j<104;j++){
    		  printf("%.0f ",img[i*104+j]);
    	  }
    	  printf("\n ");
      }
//printf("/////31*104 pixel of img ////////////////////////////////////////////////////////\n");
//  sprintf(name,"sample.txt");
//  //sprintf(name,"num2.txt");
//  img=read_txt(name,31*104);
//    for(int i=0;i<31;i++){
//  	  for(int j=0;j<104;j++){
//  		  printf("%.0f ",img[i*104+j]);
//  	  }
//  	  printf("\n ");
//    }
  free(out_img);
  HAL_Delay(50);
  //read in parameters
  sprintf(name,"b1.txt");
  float *b1=read_txt(name,8);

  sprintf(name,"w1.txt");
  float *w1=read_txt(name,72);

  //layer1
  //padding the input array
  float *out=(float *)malloc(33*106*sizeof(float));
  two_d_padding(img,out,31,104);

//  printf("/////31*104 pixel of img after padding////////////////////////////////////////////////////////\n");
//    for(int i=0;i<33;i++){
//  	  for(int j=0;j<106;j++){
//  		  printf("%.0f ",out[i*106+j]);
//  	  }
//  	  printf("\n ");
//  }
  free(img);
  HAL_Delay(50);

  // perform NN operations
  float *result_conv_1=(float *)malloc(31*104*8*sizeof(float));
  conv1(out,result_conv_1,w1,b1,31,104,8);
  free(out);
  HAL_Delay(50);
  //relu
  	 relu(result_conv_1,31*104*8);
//  for(int k=0;k<8;k++){
//    printf("/////conv_1////////////////////////////////////////////////////////\n");
//      for(int i=0;i<31;i++){
//    	  for(int j=0;j<104;j++){
//    		  printf("%.0f ",result_conv_1[i*104*8+j*8+k]);
//    	  }
//    	  printf("\n ");
//    }
//  }
  printf("/////conv_1////////////////////////////////////////////////////////\n");
      	  for(int j=0;j<32;j++){
      		  printf("%.15f ",result_conv_1[j]);
      	  }
      	  printf("\n ");
  HAL_Delay(50);
  ///////////////////////////////////////stop here /////////////////////////////////////////////
  //padding
//  float *conv_1=(float *)malloc(31*10 4*16*sizeof(float));
  //int *conv_1=(int *)malloc(32*104*16*sizeof(int))
//  float maximum;
//  float minimum;
//  HAL_Delay(50);
//  for(int k=0;k<16;k++){
//          for(int i=0;i<32;i++){
//        	  for(int j=0;j<104;j++){
//        		  maximum=result_conv_1[i*104*16+j*16+k];
//        		  if(maximum<result_conv_1[i*104*16+j*16+k])
//        			  maximum=result_conv_1[i*104*16+j*16+k];
//        		  if(minimum>result_conv_1[i*104*16+j*16+k])
//        		      minimum=result_conv_1[i*104*16+j*16+k];
//        	  }
//        }
//      }
//  	float coef;
//  	coef=(maximum-minimum)/(2^16);
//    for(int k=0;k<16;k++){
//        for(int i=0;i<32;i++){
//      	  for(int j=0;j<104;j++){
//      		conv_1[i*104*16+j*16+k]=(int)(result_conv_1[i*104*16+j*16+k]/coef);
//      		if(i==31){
//      			conv_1[i*104*16+j*16+k]=0;
//      		}
//      	  }
//      }
//    }
//  HAL_Delay(50);
//  free(result_conv_1);
//  float *result_conv_1_2=(float *)malloc(32*104*16*sizeof(float));
//  for(int k=0;k<16;k++){
//          for(int i=0;i<32;i++){
//        	  for(int j=0;j<104;j++){
//        		result_conv_1_2[i*104*16+j*16+k]=(float)(conv_1[i*104*16+j*16+k]*coef);
//        	  }
//        }
//      }
//  HAL_Delay(50);
//  for(int k=0;k<8;k++){
//    printf("/////conv_1////////////////////////////////////////////////////////\n");
//      for(int i=0;i<31;i++){
//    	  for(int j=0;j<104;j++){
//    		  printf("%.0f ",result_conv_1_2[i*104*8+j*8+k]);
//    	  }
//    	  printf("\n ");
//    }
//  }
  float *conv_1=(float *)malloc(32*104*8*sizeof(float));
      for(int k=0;k<8;k++){
          for(int i=0;i<32;i++){
        	  for(int j=0;j<104;j++){
        		conv_1[i*104*8+j*8+k]=result_conv_1[i*104*8+j*8+k];
        		if(i==31){
        			conv_1[i*104*8+j*8+k]=0;
        		}
        	  }
        }
      }
  free(result_conv_1);
  HAL_Delay(50);
  float *result_pool_1=(float *)malloc(16*52*8*sizeof(float));
  //nn_pool
  float a;
  float b;
  float fmax;
  float smax;
  // pooling(result_conv_1,result_pool_1,28,28,6);
    	  for(int k=0;k<8;k++){
    	      	  for (int i=0;i<16;i++){
    	      		  for (int j=0;j<52;j++){
    	      			  a=conv_1[(2*i)*8*104+(2*j)*8+k];
    	      			  b=conv_1[(2*i)*8*104+(2*j+1)*8+k];
    	      			  fmax=MAX(a,b);
    	      			  a=conv_1[(2*i+1)*8*104+(2*j)*8+k];
    	      			  b=conv_1[(2*i+1)*8*104+(2*j+1)*8+k];
    	      			  smax=MAX(a,b);
    	      			  result_pool_1[i*8*52+j*8+k]=MAX(fmax,smax);
    	      		  }
    	      	  }
    	      }
  free(conv_1);
  free(w1);
  free(b1);
  //layer2
//  for(int k=0;k<8;k++){
//    printf("/////poo1////////////////////////////////////////////////////////\n");
//      for(int i=0;i<16;i++){
//    	  for(int j=0;j<52;j++){
//    		  printf("%.0f ",result_pool_1[i*52*8+j*8+k]);
//    	  }
//    	  printf("\n ");
//    }
//  }
  printf("/////pool1////////////////////////////////////////////////////////\n");
        	  for(int j=0;j<32;j++){
        		  printf("%.15f ",result_pool_1[j]);
        	  }
        	  printf("\n ");
  HAL_Delay(50);
  float *out2=(float *)malloc(18*54*8*sizeof(float));
  //float out2[16*16*6]
  //padding the 3d input
  three_d_padding(result_pool_1,out2,16,52,8);
//  for(int k=0;k<8;k++){
//    printf("/////out2////////////////////////////////////////////////////////\n");
//      for(int i=0;i<18;i++){
//    	  for(int j=0;j<54;j++){
//    		  printf("%.0f ",out2[i*54*8+j*8+k]);
//    	  }
//    	  printf("\n ");
//    }
//  }
  HAL_Delay(50);
  float *result_conv_2=(float *)malloc(16*52*8*sizeof(float));
  //float result_conv_2[14*14*6];
  //convolution
  sprintf(name,"b2.txt");
  float *b2=read_txt(name,8);

  sprintf(name,"w2.txt");
  float *w2=read_txt(name,576);

  conv2(out2,result_conv_2,w2,b2,18,54,8,8);
  HAL_Delay(50);
  free(result_pool_1);
  free(w2);
  free(b2);
  //relu
  relu(result_conv_2,16*52*8);
//  for(int k=0;k<8;k++){
//      printf("/////conv2////////////////////////////////////////////////////////\n");
//        for(int i=0;i<16;i++){
//      	  for(int j=0;j<52;j++){
//      		  printf("%.0f ",result_conv_2[i*52*8+j*8+k]);
//      	  }
//      	  printf("\n ");
//      }
//    }

  printf("/////conv2////////////////////////////////////////////////////////\n");
          	  for(int j=0;j<32;j++){
          		  printf("%.15f ",result_conv_2[j]);
          	  }
          	  printf("\n ");
  float *result_pool_2=(float *)malloc(8*26*8*sizeof(float));
//  float result_pool_2[7*7*4];
  //nn_pool
  for(int k=0;k<8;k++){
      	  for (int i=0;i<8;i++){
      		  for (int j=0;j<26;j++){
      			  a=result_conv_2[(2*i)*52*8+(2*j)*8+k];
      			  b=result_conv_2[(2*i)*52*8+(2*j+1)*8+k];
      			  fmax=MAX(a,b);
      			  a=result_conv_2[(2*i+1)*52*8+(2*j)*8+k];
      			  b=result_conv_2[(2*i+1)*52*8+(2*j+1)*8+k];
      			  smax=MAX(a,b);
      			  result_pool_2[i*26*8+j*8+k]=MAX(fmax,smax);
      		  }
      	  }
      }
  // pooling(result_conv_2,result_pool_2,7,7,6);
//  for(int k=0;k<8;k++){
//        printf("/////pool2////////////////////////////////////////////////////////\n");
//          for(int i=0;i<8;i++){
//        	  for(int j=0;j<26;j++){
//        		  printf("%.0f ",result_pool_2[i*26*8+j*8+k]);
//        	  }
//        	  printf("\n ");
//        }
//  }
  printf("/////pool2////////////////////////////////////////////////////////\n");
          	  for(int j=0;j<32;j++){
          		  printf("%.15f ",result_pool_2[j]);
          	  }
          	  printf("\n ");
  HAL_Delay(50);
  free(result_conv_2);
  free(out2);

  sprintf(name,"b3.txt");
  float *b3=read_txt(name,16);

  sprintf(name,"w3.txt");
  float *w3=read_txt(name,1152);

  float *out3=(float *)malloc(10*28*8*sizeof(float));
  three_d_padding(result_pool_2,out3,8,26,8);
  free(result_pool_2);
//  for(int k=0;k<8;k++){
//      printf("/////out3////////////////////////////////////////////////////////\n");
//        for(int i=0;i<10;i++){
//      	  for(int j=0;j<28;j++){
//      		  printf("%.0f ",out3[i*28*8+j*8+k]);
//      	  }
//      	  printf("\n ");
//      }
//    }
  HAL_Delay(50);

  float *result_conv_3=(float *)malloc(8*26*16*sizeof(float));
  conv2(out3,result_conv_3,w3,b3,10,28,8,16);

  HAL_Delay(50);
  relu(result_conv_3,8*26*16);
  free(out3);
  free(w3);
  free(b3);

  printf("/////conv3///////////////////////////////////////////////////////\n");
            	  for(int j=0;j<64;j++){
            		  printf("%.15f ",result_conv_3[j]);
            	  }
            	  printf("\n ");
            	  HAL_Delay(50);
//  for(int k=0;k<16;k++){
//        printf("/////result_conv_3////////////////////////////////////////////////////////\n");
//          for(int i=0;i<8;i++){
//        	  for(int j=0;j<26;j++){
//        		  printf("%.0f ",result_conv_3[i*26*16+j*16+k]);
//        	  }
//        	  printf("\n ");
//        }
//      }
  sprintf(name,"mean.txt");
  float *mean=read_txt(name,16);

  sprintf(name,"variance.txt");
  float *variance=read_txt(name,16);

  sprintf(name,"shift.txt");
  float *shift=read_txt(name,16);

  sprintf(name,"scale.txt");
  float *scale=read_txt(name,16);

  for(int k=0;k<16;k++){
            for(int i=0;i<8;i++){
          	  for(int j=0;j<26;j++){
          		result_conv_3[i*26*16+j*16+k]=scale[k]*((result_conv_3[i*26*16+j*16+k]-mean[k])/(sqrt(variance[k])+0.0000000000000001))+shift[k];
          	  }
          }
        }

//  free(result_conv_3);
//  sprintf(name,"bbbb.txt");
//  float *batch=read_txt(name,3328);
//  for(int k=0;k<16;k++){
//              for(int i=0;i<8;i++){
//            	  for(int j=0;j<26;j++){
//            		batch[i*26*16+j*16+k]=scale[k]*((batch[i*26*16+j*16+k]-mean[k])/sqrt(variance[k])+0.0000001)+shift[k];
//            	  }
//            }
//          }
//  for(int k=0;k<16;k++){
//          printf("/////result_conv_3////////////////////////////////////////////////////////\n");
//            for(int i=0;i<8;i++){
//          	  for(int j=0;j<26;j++){
//          		  printf("%.0f ",result_conv_3[i*26*16+j*16+k]);
//          	  }
//          	  printf("\n ");
//          }
//  }
  printf("/////conv3_after_batch///////////////////////////////////////////////////////\n");
              	  for(int j=0;j<64;j++){
              		  printf("%.15f ",result_conv_3[j]);
              	  }
              	  printf("\n ");
  HAL_Delay(50);
  float *result_pool_3=(float *)malloc(4*13*16*sizeof(float));

  for(int k=0;k<16;k++){
        	  for (int i=0;i<4;i++){
        		  for (int j=0;j<13;j++){
        			  a=result_conv_3[(2*i)*26*16+(2*j)*16+k];
        			  b=result_conv_3[(2*i)*26*16+(2*j+1)*16+k];
        			  fmax=MAX(a,b);
        			  a=result_conv_3[(2*i+1)*26*16+(2*j)*16+k];
        			  b=result_conv_3[(2*i+1)*26*16+(2*j+1)*16+k];
        			  smax=MAX(a,b);
        			  result_pool_3[i*13*16+j*16+k]=MAX(fmax,smax);
        		  }
        	  }
        }
  free(mean);
  free(variance);
  free(shift);
  free(scale);
  free(result_conv_3);
//  for(int k=0;k<16;k++){
//            printf("/////pool////////////////////////////////////////////////////////\n");
//              for(int i=0;i<4;i++){
//            	  for(int j=0;j<13;j++){
//            		  printf("%.0f ",result_pool_3[i*13*16+j*16+k]);
//            	  }
//            	  printf("\n ");
//            }
//    }
  printf("/////pool3////////////////////////////////////////////////////////\n");
            	  for(int j=0;j<32;j++){
            		  printf("%.15f ",result_pool_3[j]);
            	  }
            	  printf("\n ");
  HAL_Delay(50);
  ///////////////////////////////////////stop here /////////////////////////////////////////////

  sprintf(name,"bc1.txt");
  float *bc1=read_txt(name,32);

  sprintf(name,"fc1.txt");
  float *fc1=read_txt(name,26624);
  float *y=(float *)malloc(32*sizeof(float));
  float sum2;
    //dense
    for(int i=0;i<32;i++){
  	  sum2=0;
  	  for(int j=0;j<832;j++){
  	  	  sum2+=fc1[i+j*32]*result_pool_3[j];
  	  }
  	  sum2+=bc1[i];
  	  y[i]=sum2;
    }
    free(fc1);
    free(bc1);
    //free(result_pool_3);
    relu(y,32);

    printf("The first dense/////////////////////////////////////////////////////////////\n");
      for(int i=0;i<36;i++){
    	  printf("y %d is %.15f\n",i, y[i]);
    	  HAL_Delay(50);
      }
    HAL_Delay(50);
  //dense
  sprintf(name,"res_b1.txt");
//  float *res_bc1=read_txt(name,36);
  float *res_bc1=read_txt(name,36);

  sprintf(name,"res1.txt");
  float *res_fc1=read_txt(name,1152);
  HAL_Delay(50);
  float res[36];
  float result_dense1[36];
  //float *y=(float *)malloc(32*sizeof(float));
  for(int i=0;i<36;i++){
	  sum2=0;
	  for(int j=0;j<32;j++){
	  	  sum2+=res_fc1[i+j*36]*y[j];
	  }
	  sum2+=res_bc1[i];
	  res[i]=sum2;
  }
  free(res_bc1);
  free(res_fc1);
  HAL_Delay(50);
  sum2=0;
  for(int i=0;i<36;i++){
	  sum2+=exp(res[i]);
  }
  HAL_Delay(50);
  for(int i=0;i<36;i++){
	  result_dense1[i]=exp(res[i])/sum2;
  }
  // dense(result_pool_2,result_dense,fc,bc,2940);
  printf("The first dense/////////////////////////////////////////////////////////////\n");
  for(int i=0;i<36;i++){
	  printf("prediction of number %d is %.15f\n",i, result_dense1[i]);
	  HAL_Delay(50);
  }
  ///////////////////////////////////////stop here /////////////////////////////////////////////
  sprintf(name,"bc2.txt");
    float *bc2=read_txt(name,32);

    sprintf(name,"fc2.txt");
    float *fc2=read_txt(name,26624);
      //dense
      for(int i=0;i<32;i++){
    	  sum2=0;
    	  for(int j=0;j<832;j++){
    	  	  sum2+=fc2[i+j*32]*result_pool_3[j];
    	  }
    	  sum2+=bc2[i];
    	  y[i]=sum2;
      }
      free(fc2);
      free(bc2);
      //free(result_pool_3);
      relu(y,32);

      HAL_Delay(50);
    //dense
    sprintf(name,"res_b2.txt");
    float *res_bc2=read_txt(name,36);

    sprintf(name,"res2.txt");
    float *res_fc2=read_txt(name,1152);
    HAL_Delay(50);

    float result_dense2[36];
    //float *y=(float *)malloc(32*sizeof(float));
    for(int i=0;i<36;i++){
  	  sum2=0;
  	  for(int j=0;j<32;j++){
  	  	  sum2+=res_fc2[i+j*36]*y[j];
  	  }
  	  sum2+=res_bc2[i];
  	  res[i]=sum2;
    }
    free(res_bc2);
    free(res_fc2);
    HAL_Delay(50);
    sum2=0;
    for(int i=0;i<36;i++){
  	  sum2+=exp(res[i]);
    }
    HAL_Delay(50);
    for(int i=0;i<36;i++){
  	  result_dense2[i]=exp(res[i])/sum2;
    }
    // dense(result_pool_2,result_dense,fc,bc,2940);
    printf("The second dense/////////////////////////////////////////////////////////////\n");
    for(int i=0;i<36;i++){
  	  printf("prediction of number %d is %.15f\n",i, result_dense2[i]);
  	  HAL_Delay(50);
    }
    ///////////////////////////////////////stop here /////////////////////////////////////////////
    sprintf(name,"bc3.txt");
        float *bc3=read_txt(name,32);

        sprintf(name,"fc3.txt");
        float *fc3=read_txt(name,26624);
          //dense
          for(int i=0;i<32;i++){
        	  sum2=0;
        	  for(int j=0;j<832;j++){
        	  	  sum2+=fc3[i+j*32]*result_pool_3[j];
        	  }
        	  sum2+=bc3[i];
        	  y[i]=sum2;
          }
          free(fc3);
          free(bc3);
          //free(result_pool_3);
          relu(y,32);

          HAL_Delay(50);
        //dense
        sprintf(name,"res_b3.txt");
        float *res_bc3=read_txt(name,36);

        sprintf(name,"res3.txt");
        float *res_fc3=read_txt(name,1152);
        HAL_Delay(50);

        float result_dense3[36];
        //float *y=(float *)malloc(32*sizeof(float));
        for(int i=0;i<36;i++){
      	  sum2=0;
      	  for(int j=0;j<32;j++){
      	  	  sum2+=res_fc3[i+j*36]*y[j];
      	  }
      	  sum2+=res_bc3[i];
      	  res[i]=sum2;
        }
        free(res_bc3);
        free(res_fc3);
        HAL_Delay(50);
        sum2=0;
        for(int i=0;i<36;i++){
      	  sum2+=exp(res[i]);
        }
        HAL_Delay(50);
        for(int i=0;i<36;i++){
      	  result_dense3[i]=exp(res[i])/sum2;
        }
        // dense(result_pool_2,result_dense,fc,bc,2940);
        printf("The third dense/////////////////////////////////////////////////////////////\n");
        for(int i=0;i<36;i++){
      	  printf("prediction of number %d is %.15f\n",i, result_dense3[i]);
      	  HAL_Delay(50);
        }
    ///////////////////////////////////////stop here /////////////////////////////////////////////
        sprintf(name,"bc4.txt");
                float *bc4=read_txt(name,32);

                sprintf(name,"fc4.txt");
                float *fc4=read_txt(name,26624);
                  //dense
                  for(int i=0;i<32;i++){
                	  sum2=0;
                	  for(int j=0;j<832;j++){
                	  	  sum2+=fc4[i+j*32]*result_pool_3[j];
                	  }
                	  sum2+=bc4[i];
                	  y[i]=sum2;
                  }
                  free(fc4);
                  free(bc4);
                  //free(result_pool_3);
                  relu(y,32);

                  HAL_Delay(50);
                //dense
                sprintf(name,"res_b4.txt");
                float *res_bc4=read_txt(name,36);

                sprintf(name,"res4.txt");
                float *res_fc4=read_txt(name,1152);
                HAL_Delay(50);

                float result_dense4[36];
                //float *y=(float *)malloc(32*sizeof(float));
                for(int i=0;i<36;i++){
              	  sum2=0;
              	  for(int j=0;j<32;j++){
              	  	  sum2+=res_fc4[i+j*36]*y[j];
              	  }
              	  sum2+=res_bc4[i];
              	  res[i]=sum2;
                }
                free(res_bc4);
                free(res_fc4);
                HAL_Delay(50);
                sum2=0;
                for(int i=0;i<36;i++){
              	  sum2+=exp(res[i]);
                }
                HAL_Delay(50);
                for(int i=0;i<36;i++){
              	  result_dense4[i]=exp(res[i])/sum2;
                }
                // dense(result_pool_2,result_dense,fc,bc,2940);
                printf("The 4th dense/////////////////////////////////////////////////////////////\n");
                for(int i=0;i<36;i++){
              	  printf("prediction of number %d is %.15f\n",i, result_dense4[i]);
              	  HAL_Delay(50);
                }
                ///////////////////////////////////////stop here /////////////////////////////////////////////
                    HAL_Delay(500);
                      sprintf(name,"bc5.txt");
                        float *bc5=read_txt(name,32);

                        sprintf(name,"fc5.txt");
                        float *fc5=read_txt(name,26624);
                          //dense
                          for(int i=0;i<32;i++){
                        	  sum2=0;
                        	  for(int j=0;j<832;j++){
                        	  	  sum2+=fc5[i+j*32]*result_pool_3[j];
                        	  }
                        	  sum2+=bc5[i];
                        	  y[i]=sum2;
                          }
                          free(fc5);
                          free(bc5);
                          //free(result_pool_3);
                          relu(y,32);

                          HAL_Delay(50);
                        //dense
                        sprintf(name,"res_b5.txt");
                        float *res_bc5=read_txt(name,36);

                        sprintf(name,"res5.txt");
                        float *res_fc5=read_txt(name,1152);

                        float result_dense5[36];
                        //float *y=(float *)malloc(32*sizeof(float));
                        for(int i=0;i<36;i++){
                      	  sum2=0;
                      	  for(int j=0;j<32;j++){
                      	  	  sum2+=res_fc5[i+j*36]*y[j];
                      	  }
                      	  sum2+=res_bc5[i];
                      	  res[i]=sum2;
                        }
                        free(res_bc5);
                        free(res_fc5);
                        HAL_Delay(50);
                        sum2=0;
                        for(int i=0;i<36;i++){
                      	  sum2+=exp(res[i]);
                        }
                        HAL_Delay(50);
                        for(int i=0;i<36;i++){
                      	  result_dense5[i]=exp(res[i])/sum2;
                        }
                        printf("The 5th dense/////////////////////////////////////////////////////////////\n");
                        for(int i=0;i<36;i++){
                      	  printf("prediction of number %d is %.15f\n",i, result_dense5[i]);
                      	  HAL_Delay(50);
                        }
                        ///////////////////////////////////////stop here /////////////////////////////////////////////
                            HAL_Delay(500);
                              sprintf(name,"bc6.txt");
                                float *bc6=read_txt(name,32);

                                sprintf(name,"fc6.txt");
                                float *fc6=read_txt(name,26624);
                                  //dense
                                  for(int i=0;i<32;i++){
                                	  sum2=0;
                                	  for(int j=0;j<832;j++){
                                	  	  sum2+=fc6[i+j*32]*result_pool_3[j];
                                	  }
                                	  sum2+=bc6[i];
                                	  y[i]=sum2;
                                  }
                                  free(fc6);
                                  free(bc6);
                                  //free(result_pool_3);
                                  relu(y,32);

                                  HAL_Delay(50);
                                //dense
                                sprintf(name,"res_b6.txt");
                                float *res_bc6=read_txt(name,36);

                                sprintf(name,"res6.txt");
                                float *res_fc6=read_txt(name,1152);

                                float result_dense6[36];
                                //float *y=(float *)malloc(32*sizeof(float));
                                for(int i=0;i<36;i++){
                              	  sum2=0;
                              	  for(int j=0;j<32;j++){
                              	  	  sum2+=res_fc6[i+j*36]*y[j];
                              	  }
                              	  sum2+=res_bc6[i];
                              	  res[i]=sum2;
                                }
                                free(res_bc6);
                                free(res_fc6);
                                HAL_Delay(50);
                                sum2=0;
                                for(int i=0;i<36;i++){
                              	  sum2+=exp(res[i]);
                                }
                                HAL_Delay(50);
                                for(int i=0;i<36;i++){
                              	  result_dense6[i]=exp(res[i])/sum2;
                                }
                                printf("The 6th dense/////////////////////////////////////////////////////////////\n");
                                for(int i=0;i<36;i++){
                              	  printf("prediction of number %d is %.15f\n",i, result_dense6[i]);
                              	  HAL_Delay(50);
                                }
    ///////////////////////////////////////stop here /////////////////////////////////////////////
    HAL_Delay(500);
      sprintf(name,"bc7.txt");
        float *bc7=read_txt(name,32);

        sprintf(name,"fc7.txt");
        float *fc7=read_txt(name,26624);
          //dense
          for(int i=0;i<32;i++){
        	  sum2=0;
        	  for(int j=0;j<832;j++){
        	  	  sum2+=fc7[i+j*32]*result_pool_3[j];
        	  }
        	  sum2+=bc7[i];
        	  y[i]=sum2;
          }
          free(fc7);
          free(bc7);
          //free(result_pool_3);
          relu(y,32);

          HAL_Delay(50);
        //dense
        sprintf(name,"res_b7.txt");
        float *res_bc7=read_txt(name,36);

        sprintf(name,"res7.txt");
        float *res_fc7=read_txt(name,1152);

        float result_dense7[36];
        //float *y=(float *)malloc(32*sizeof(float));
        for(int i=0;i<36;i++){
      	  sum2=0;
      	  for(int j=0;j<32;j++){
      	  	  sum2+=res_fc7[i+j*36]*y[j];
      	  }
      	  sum2+=res_bc7[i];
      	  res[i]=sum2;
        }
        free(res_bc7);
        free(res_fc7);
        HAL_Delay(50);
        sum2=0;
        for(int i=0;i<36;i++){
      	  sum2+=exp(res[i]);
        }
        HAL_Delay(50);
        for(int i=0;i<36;i++){
      	  result_dense7[i]=exp(res[i])/sum2;
        }
        printf("The 7th dense/////////////////////////////////////////////////////////////\n");
        for(int i=0;i<36;i++){
      	  printf("prediction of number %d is %.15f\n",i, result_dense7[i]);
      	  HAL_Delay(50);
        }
  while(1);
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 18;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 3;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{

  /* USER CODE BEGIN ETH_Init 0 */

  /* USER CODE END ETH_Init 0 */

   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
  MACAddr[0] = 0x00;
  MACAddr[1] = 0x80;
  MACAddr[2] = 0xE1;
  MACAddr[3] = 0x00;
  MACAddr[4] = 0x00;
  MACAddr[5] = 0x00;
  heth.Init.MACAddr = &MACAddr[0];
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
  heth.Init.TxDesc = DMATxDscrTab;
  heth.Init.RxDesc = DMARxDscrTab;
  heth.Init.RxBuffLen = 1524;

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
  {
    Error_Handler();
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
  for(i=0 ; i<len ; i++)
    ITM_SendChar((*ptr++));
  return len;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);
	__disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
